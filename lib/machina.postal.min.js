/**
 * machina.postal - A plugin for machina.js that auto-wires finite state machines into the postal.js local message bus.
 * Author: Jim Cowart (http://freshbrewedcode.com/jimcowart)
 * Version: v0.4.0
 * Url: https://github.com/ifandelse/machina.postal
 * License(s): MIT
 */
(function(n,e){"object"==typeof module&&module.exports?module.exports=function(n,s){return e(n,s)}:"function"==typeof define&&define.amd?define(["machina","postal"],function(s,t){return e(s,t,n)}):e(n.machina,n.postal,n)})(this,function(n,e){n.Fsm.prototype.removeBusPublishing=function(){this.off("*",this._bus.channels[this._bus.eventChannel].eventPublisher)},n.Fsm.prototype.removeBusSubscriptions=function(){for(var n=this._bus.channels[this._bus.handlerChannel]._subscriptions;n.length;)n.pop().unsubscribe()},n.Fsm.prototype.removeAllBusIntegration=function(){this.removeBusSubscriptions(),this.removeBusPublishing()};var s=n.bus={config:{handlerChannelSuffix:"",eventChannelSuffix:".events"},wireHandlersToBus:function(n,e){n._bus.channels[e]._subscriptions.push(n._bus.channels[e].subscribe("#",function(e,s){n.handle.call(n,s.topic,e,s)}))},wireEventsToBus:function(n,e){var s=n._bus.channels[e].eventPublisher=function(){{var s=Array.prototype.slice.call(arguments,0);s[0].toLowerCase()}try{n._bus.channels[e].publish(s[0],s[1])}catch(t){console&&"undefined"!=typeof console.log&&console.log(t.toString())}};n.on("*",s)},wireUp:function(n){function s(s,t){return s?"ChannelDefinition"==typeof s?{name:s.channel,channel:n.handlerChannel}:("String"!=typeof s&&(s=n.namespace+t),{name:s,channel:e.channel(s)}):void 0}if(!n._noBus){var t=s(n.handlerChannel,this.config.handlerChannelSuffix),i=s(n.eventChannel,this.config.eventChannelSuffix);n._bus={handlerChannel:t.name,eventChannel:i.name,channels:{}},n._bus.channels[t]=t.channel,n._bus.channels[i]=t.channel,n._bus.channels[t]._subscriptions=[],this.wireHandlersToBus(n,t),this.wireEventsToBus(n,i)}}};return n.on("newfsm",function(n){s.wireUp(n)}),n});